version: 2.1
parameters:
  deploy:
    type: boolean
    default: false
  skip_api_tests:
    type: boolean
    default: false
commands:
  load-config:
    description: Load env config
    steps:
      - run:
          name: Load env config
          command: cat .config >> $BASH_ENV
orbs:
  sam: circleci/aws-sam-serverless@6.0.3
jobs:
  install:
    docker:
      - image: cimg/node:22.5
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: cache-yarn-v1-{{checksum "yarn.lock"}}-{{checksum "web/yarn.lock"}}
      - run:
          name: Install API dependencies
          command: yarn
      - run:
          name: Install web dependencies
          command: yarn
          working_directory: web
      - run:
          name: Installing layer dependencies
          command: yarn install --modules-folder layers/dependencies/nodejs/node_modules --prod
      - save_cache:
          key: cache-yarn-v1-{{checksum "yarn.lock"}}-{{checksum "web/yarn.lock"}}
          paths:
            - ~/.cache/yarn
      - run:
          name: Calculate config values
          command: |
            case "$CIRCLE_BRANCH" in
              master) ENV="PROD" ;;
              development) ENV="DEV" ;;
              *) ENV="LOCAL" ;;
            esac
            echo "ENV=$ENV" >> .config
            echo "CYPRESS_ENV=$ENV" >> .config
      - persist_to_workspace:
          root: ~/
          paths:
            - repo
  unit_test:
    docker:
      - image: cimg/node:22.5
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: Running API unit tests
          command: yarn test:api

      # - run:
      #     name: Running Web unit tests
      #     command: yarn test:web

      - store_artifacts:
          path: coverage
          destination: coverage
  lint:
    docker:
      - image: cimg/node:22.5
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: Running linter
          command: yarn lint
  build:
    docker:
      - image: cimg/node:22.5
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/
      - load-config

      - run:
          name: Build API
          command: yarn build:api

      - run:
          name: Build Web
          command: yarn build:web -c $ENV

      - persist_to_workspace:
          root: ~/
          paths:
            - repo/dist
            - repo/layers
  api_deploy:
    executor: sam/default
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/
      - load-config
      - sam/install
      - deploy:
          name: SAM Deploy
          command: sam deploy --template-file cf.household.yaml --s3-bucket ${AWS_PACKAGES_S3} --stack-name Household-$ENV --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM --parameter-overrides Env=$ENV TestUserPassword=${CYPRESS_PASSWORD}
      - run:
          name: Invoke Post deploy Lambda
          command: aws lambda invoke --function-name Household-$ENV-PostDeploy /dev/null
  web_deploy:
    docker:
      - image: cibuilds/aws:1.16.1
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/
      - load-config
      - run:
          name: Insert RUM App Monitor Id
          command: sed -i -e "s/RUM_APP_MONITOR_ID/$(aws cloudformation describe-stacks --stack-name Household-$ENV --query 'Stacks[0].Outputs[?OutputKey==`RumAppMonitorId`].OutputValue' --output text)/g" ./dist/web/browser/index.html
      - run:
          name: Insert RUM Identity Pool Id
          command: sed -i -e "s/RUM_IDENTITY_POOL_ID/$(aws cloudformation describe-stacks --stack-name Household-$ENV --query 'Stacks[0].Outputs[?OutputKey==`RumIdentityPoolId`].OutputValue' --output text)/g" ./dist/web/browser/index.html
      - deploy:
          name: Web deploy
          command: aws s3 sync dist/web/browser s3://$(aws cloudformation describe-stacks --stack-name Household-$ENV --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucket'].OutputValue" --output text)
  api_test_setup:
    docker:
      - image: cibuilds/aws:1.16.1
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/
      - load-config
      - run: cat .config >> test/.env
      - run:
          name: Getting MongoDB connection string
          command: echo "MONGODB_CONNECTION_STRING=\"mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_CLUSTER_DOMAIN/household-$ENV?retryWrites=true&w=majority\"" >> test/.env
      - run:
          name: Getting Cognito user pool Id
          command: echo "USER_POOL_ID=\"$(aws cloudformation describe-stacks --stack-name Household-$ENV --query 'Stacks[0].Outputs[?OutputKey==`CognitoUserPoolId`].OutputValue' --output text)\"" >> test/.env
      - run:
          name: Getting Import bucket name
          command: echo "IMPORT_BUCKET=\"$(aws cloudformation describe-stacks --stack-name Household-$ENV --query 'Stacks[0].Outputs[?OutputKey==`ImportBucket`].OutputValue' --output text)\"" >> test/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - repo
  test:
    parameters:
      testCommand:
        type: string
    docker:
      - image: cypress/base:16.14.2
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/
      - load-config
      - restore_cache:
          key: cache-cypress-v4-{{checksum "test/yarn.lock"}}
      - run:
          name: Install test dependencies
          command: yarn
          working_directory: test
      - save_cache:
          key: cache-cypress-v4-{{checksum "test/yarn.lock"}}
          paths:
            - /root/.cache/Cypress
      - run:
          name: Running tests
          working_directory: test
          command: export ENV=$ENV && yarn run test:<<parameters.testCommand>>

      - store_artifacts:
          path: test/cypress/screenshots
          destination: test/cypress/screenshots
workflows:
  local:
    jobs:
      - install
      # - unit_test:
      #     name: unit_test
      #     requires:
      #       - install
      # - lint:
      #     name: lint
      #     requires:
      #       - install
      # - build:
      #     name: build
      #     requires:
      #       - install
      # - api_deploy:
      #     name: api_deploy
      #     filters: pipeline.git.branch == "master" or pipeline.git.branch == "development" or pipeline.parameters.deploy
      #     requires:
      #       - unit_test
      #       - lint
      #       - build
      # - web_deploy:
      #     name: web_deploy
      #     requires:
      #       - api_deploy
      - api_test_setup:
          requires:
            - install
          filters: pipeline.git.branch != "master" and pipeline.parameters.skip_api_tests != true
      # - test:
      #     name: test_account
      #     testCommand: "account"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_category
      #     testCommand: "category"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_project
      #     testCommand: "project"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_product
      #     testCommand: "product"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_recipient
      #     testCommand: "recipient"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_common
      #     testCommand: "transaction-common"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_payment
      #     testCommand: "transaction-payment"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_deferred
      #     testCommand: "transaction-deferred"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_split
      #     testCommand: "transaction-split"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_reimbursement
      #     testCommand: "transaction-reimbursement"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_transfer
      #     testCommand: "transaction-transfer"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_transaction_draft
      #     testCommand: "transaction-draft"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_setting
      #     testCommand: "setting"
      #     requires:
      #       - api_test_setup
      # - test:
      #     name: test_user
      #     testCommand: "user"
      #     requires:
      #       - api_test_setup
      - test:
          name: test_file
          testCommand: "file"
          requires:
            - api_test_setup
