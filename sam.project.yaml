AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Household Project Api"
Parameters:
  LambdaRoleArn:
    Type: String
  UserPoolArn:
    Type: String
  Env:
    Type: String
  MongodbConnectionString:
    Type: String
  MongooseLayer:
    Type: String

Conditions:
  ShouldUseLayers: !Not [!Equals [!Ref MongooseLayer, "MongooseLayer"]]

Globals:
  Function:
    Handler: index.default
    Runtime: nodejs18.x
    Timeout: 60
    MemorySize: 512
    Tracing: Active
    Layers:
      - !If [ShouldUseLayers, !Ref MongooseLayer, !Ref "AWS::NoValue"]
    Environment:
      Variables:
        MONGODB_CONNECTION_STRING: !Ref MongodbConnectionString

Resources:
  ProjectApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub Household-${Env}-Project
      StageName: project
      TracingEnabled: true
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"  
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
          ResponseTemplates:
            application/json: '{ "message": $context.error.messageString }'            
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 404
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"  
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
          ResponseTemplates:
            application/json: '{ "message": $context.error.messageString }'

  CreateProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-CreateProject
      CodeUri: dist/api/create-project
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /v1/projects
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-UpdateProject
      CodeUri: dist/api/update-project
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /v1/projects/{projectId}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

  ListProjects:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-ListProjects
      CodeUri: dist/api/list-projects
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /v1/projects
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  GetProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-GetProject
      CodeUri: dist/api/get-project
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /v1/projects/{projectId}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-DeleteProject
      CodeUri: dist/api/delete-project
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /v1/projects/{projectId}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  MergeProjects:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-MergeProjects
      CodeUri: dist/api/merge-projects
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /v1/projects/{projectId}/merge
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  ProjectApi:
    Description: "Household Project API"
    Value: !Sub "${ProjectApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
