AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Household User API"
Parameters:
  LambdaRoleArn:
    Type: String
  UserPoolArn:
    Type: String
  Env:
    Type: String
  UserPoolId:
    Type: String
  ClientId:
    Type: String
  DependenciesLayer:
    Type: String

Conditions:
  ShouldUseLayers: !Not [!Equals [!Ref DependenciesLayer, "DependenciesLayer"]]

Globals:
  Function:
    Handler: index.default
    Runtime: nodejs20.x
    Timeout: 10
    MemorySize: 512
    Tracing: Active
    Tags:
      Application: !Sub Household-${Env}
    Layers:
      - !If [ShouldUseLayers, !Ref DependenciesLayer, !Ref "AWS::NoValue"]
    Environment:
      Variables:
        USER_POOL_ID: !Ref UserPoolId
        CLIENT_ID: !Ref ClientId

Resources:
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub Household-${Env}-User
      StageName: user
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn
      TracingEnabled: true
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
          ResponseTemplates:
            application/json: '{ "message": $context.error.messageString }'
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 404
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
          ResponseTemplates:
            application/json: '{ "message": $context.error.messageString }'

  ListUsers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-ListUsers
      CodeUri: dist/api/list-users
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /v1/users
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-CreateUser
      CodeUri: dist/api/create-user
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /v1/users
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-DeleteUser
      CodeUri: dist/api/delete-user
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /v1/users/{email}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  ConfirmUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-ConfirmUser
      CodeUri: dist/api/confirm-user
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /v1/users/{email}/confirm
            Method: POST

  Login:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-Login
      CodeUri: dist/api/login
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /v1/login
            Method: POST

  RefreshToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Household-${Env}-RefreshToken
      CodeUri: dist/api/refresh-token
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /v1/refreshToken
            Method: POST

Outputs:
  UserApi:
    Description: "Household User API"
    Value: !Sub "${UserApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
